<?php

namespace App\Tests\Controller\Dashboard\CV\Skills;

use App\Entity\Main\CV\Competence;
use App\Entity\Main\CV\CompetenceCategorie;
use App\Entity\Main\CV\CompetenceNiveau;
use App\Entity\Main\CV\Technologie;
use App\Tests\Controller\WebTestCase;
use Symfony\Component\HttpFoundation\Request;

/**
 * @internal
 * @coversNothing
 */
class SkillControllerTest extends WebTestCase
{
    /**
     * @var CompetenceCategorie
     */
    protected CompetenceCategorie $_categ;
    protected CompetenceNiveau $_level;
    protected Technologie $_tech;

    protected function setUp(): void
    {
        $this->fixtures[] = __DIR__ . '/../../../../Fixtures/Main/CV/SkillCategories/SkillCategoriesFixtures.yaml';
        $this->fixtures[] = __DIR__ . '/../../../../Fixtures/Main/CV/SkillLevel/SkillLevelFixtures.yaml';
        $this->fixtures[] = __DIR__ . '/../../../../Fixtures/Main/CV/Technology/TechnologyFixtures.yaml';
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->_categ = $this->data['skill_categ'][rand(0, 10)];
        $this->_level = $this->data['skill_level'][rand(0, 10)];
        $this->_tech = $this->data['skill_tech'][rand(0, 10)];
    }

    public function testNotfound()
    {
        $this->login('admin');
        $this->client->request(Request::METHOD_GET, '/dashboard/cv/skills/categories/0');
        self::assertResponseIsSuccessful();
    }

    public function testFound()
    {
        $this->login('admin');
        $this->client->request(Request::METHOD_GET, '/dashboard/cv/skills/categories/' . $this->_categ->getId());
        self::assertSelectorExists('#competence_submit');
        self::assertResponseIsSuccessful();
    }

    public function testAddSkills()
    {
        $this->login('admin');
        $crawler = $this->client->request(Request::METHOD_GET, '/dashboard/cv/skills/categories/' . $this->_categ->getId());
        $form = $crawler->filter('#competence_submit')->form([
            'competence[niveau]' => $this->_level->getId(),
            'competence[technologie]' => $this->_tech->getId(),
            'competence[scolaire]' => true,
            'competence[autoditacte]' => false,
        ]);
        $this->client->submit($form);
        self::assertResponseRedirects();

        /** @var Competence $_skill */
        $_skill = $this->em->getRepository(Competence::class)->findOneBy([]);
        self::assertNotNull($_skill);
        self::assertEquals($this->_level->getId(), $_skill->getNiveau()->getId());
        self::assertEquals($this->_tech->getId(), $_skill->getTechnologie()->getId());
        self::assertEquals($this->_categ->getId(), $_skill->getCategorie()->getId());
        self::assertTrue($_skill->getScolaire());
        self::assertFalse($_skill->getAutoditacte());
    }
}
